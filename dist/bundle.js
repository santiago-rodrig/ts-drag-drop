(()=>{"use strict";const e=class{constructor(e,t,r,n){this.templateEl=document.getElementById(e),this.targetNode=document.getElementById(t);const s=document.importNode(this.templateEl.content,!0);this.element=s.firstElementChild,n&&(this.element.id=n),this.attach(r)}attach(e){e?this.targetNode.insertAdjacentElement("afterbegin",this.element):this.targetNode.insertAdjacentElement("beforeend",this.element)}};function t(e,t,r){return{configurable:!0,enumerable:!1,get(){return r.value.bind(this)}}}var r;!function(e){e.ACTIVE="active",e.INACTIVE="finished"}(r||(r={}));class n{constructor(e,t,n,s){this.status=r.ACTIVE,this.title=e,this.description=t,this.people=n,this.id=Math.random().toString(),s&&(this.status=s)}}class s{constructor(){this._projects=[],this._listeners=[]}static getInstance(){return this._instance||(this._instance=new s),this._instance}moveProject(e,t){const r=this._projects.find((t=>t.id===e));r&&(r.status=t),this.callListeners()}addProject(e){this._projects.push(new n(...e)),this.callListeners()}getProjects(e){switch(e){case r.ACTIVE:return[...this._projects].filter((e=>e.status===r.ACTIVE));case r.INACTIVE:return[...this._projects].filter((e=>e.status===r.INACTIVE));default:return[...this._projects]}}callListeners(){this._listeners.forEach((e=>e()))}addListener(e){this._listeners.push(e)}}const i=s.getInstance();function l(e){const{value:t}=e;if("string"==typeof t){const{minLength:r,maxLength:n}=e;if(r&&r>t.length)return!1;if(n&&n<t.length)return!1}else{const{min:r,max:n}=e;if(r&&r>t)return!1;if(n&&n<t)return!1}return!0}class a extends e{constructor(){super("project-input","app",!0,"user-input"),this.titleInput=this.element.querySelector("#title"),this.descriptionInput=this.element.querySelector("#description"),this.peopleInput=this.element.querySelector("#people"),this.configure(),this.renderContents()}submitHandler(e){e.preventDefault();const t=this.getInputValues();t&&(i.addProject(t),this.clearInputValues())}clearInputValues(){this.titleInput.value="",this.descriptionInput.value="",this.peopleInput.value=""}getInputValues(){const e=this.titleInput.value,t=this.descriptionInput.value,r=this.peopleInput.value,n={value:t,minLength:5},s={value:+r,min:1,max:10};if(l({value:e,minLength:1})&&l(n)&&l(s))return[e,t,+r];alert("Invalid input values!")}renderContents(){}configure(){this.element.addEventListener("submit",this.submitHandler)}}!function(e,t,r,n){var s,i=arguments.length,l=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(l=(i<3?s(l):i>3?s(t,r,l):s(t,r))||l);i>3&&l&&Object.defineProperty(t,r,l)}([t],a.prototype,"submitHandler",null);var o=function(e,t,r,n){var s,i=arguments.length,l=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(l=(i<3?s(l):i>3?s(t,r,l):s(t,r))||l);return i>3&&l&&Object.defineProperty(t,r,l),l};class c extends e{constructor(e,t){super("single-project",e,!1),this._project=t,this.configure(),this.renderContents()}get projectMembers(){switch(this._project.people){case 1:return"1 member";default:return`${this._project.people} members`}}dragStartHandler(e){e.dataTransfer.setData("text/plain",this._project.id),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}configure(){this.element.id=this._project.id,this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContents(){this.element.querySelector("h2").textContent=this._project.title,this.element.querySelector("h3").textContent=this.projectMembers,this.element.querySelector("p").textContent=this._project.description}}o([t],c.prototype,"dragStartHandler",null),o([t],c.prototype,"dragEndHandler",null);var d=function(e,t,r,n){var s,i=arguments.length,l=i<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,r,n);else for(var a=e.length-1;a>=0;a--)(s=e[a])&&(l=(i<3?s(l):i>3?s(t,r,l):s(t,r))||l);return i>3&&l&&Object.defineProperty(t,r,l),l};class p extends e{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.projects=[],this.configure(),this.renderContents()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dragDropHandler(e){const t=e.dataTransfer.getData("text/plain");i.moveProject(t,this.type),this.element.querySelector("ul").classList.remove("droppable")}dragLeaveHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&this.element.querySelector("ul").classList.remove("droppable")}renderProjects(){document.getElementById(`${this.type}-projects`).querySelector("ul").innerHTML="",this.projects.forEach((e=>{new c(`${this.type}-projects-list`,e)}))}configure(){i.addListener((()=>{this.projects=i.getProjects(this.type),this.renderProjects()})),this.element.querySelector("ul").id=`${this.type}-projects-list`,this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dragDropHandler)}renderContents(){this.element.querySelector("h2").textContent=`${this.type.toUpperCase()} PROJECTS`}}d([t],p.prototype,"dragOverHandler",null),d([t],p.prototype,"dragDropHandler",null),d([t],p.prototype,"dragLeaveHandler",null),new a,new p(r.ACTIVE),new p(r.INACTIVE)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,